<#

.DESCRIPTION

A script to format xlsx reports generated by SQL Queries in software like SQL SSMS or Azure Data Studio
The script monitors a folder and formats any xlsx files that are saved to this folder:
    Enables AutoFilter
    Sets header row font to Bold
    Freezes the first pane for better scrolling experience
    Autosizes columns width

Workflow:
    1. Set variables
    2. Define function
    3. Call function

#>

#-------------------------------------------------------------------------------------------------------------#

#1. Set variables

Import-Module SqlServer
$ErrorActionPreference = "Inquire"

[string]$ProcessFolder = Get-Content $PSScriptRoot\includes\process_excel_folder.txt -Raw

#-------------------------------------------------------------------------------------------------------------#

#2. Define function

Function Format-XLSX ($file) {
    
    ### Resave files cuz Azurce Data Studio generates bad xlsx ###
    $excel = New-Object -ComObject Excel.Application

    # Set Excel to be visible
    #$excel.Visible = $true

    $workbook = $excel.Workbooks.Open($file.FullName)
    $workbook.Save()
    $workbook.Close()
    $excel.Quit()

    # Release the COM objects
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null

    # Clean up the COM objects from memory
    Remove-Variable workbook
    Remove-Variable excel
    [GC]::Collect()
    [GC]::WaitForPendingFinalizers()

    ### Format file ###
    $excelPackage = Open-ExcelPackage -Path $file

    $worksheet = $excelPackage.Workbook.Worksheets["sheet1"]
    $worksheet.Cells["1:1"].Style.Font.Bold = $true
    $worksheet.View.FreezePanes(2,1)
    $worksheet.Cells["1:1"].AutoFilter = $true

    # Auto size the columns
    for ($col = 1; $col -le $worksheet.Dimension.End.Column; $col++) {
        $worksheet.Column($col).AutoFit()
    }

    Close-ExcelPackage $excelPackage

    ### Move and rename file ###
    $date = Get-Date -Format "yyyy-MM-dd HH-mm"
    $fileName = [System.IO.Path]::GetFileNameWithoutExtension($File)
    $fileExtension = [System.IO.Path]::GetExtension($File)
    $newFileName = "$fileName` $date$fileExtension"

    try {
        # Move the file one level up
        Write-Host "$PrcosessFolder\$newFileName"
        Move-Item -Path $file.FullName -Destination "$ProcessFolder\$newFileName"
        Write-Host "Moved $($file.Name)"
        Start "$ProcessFolder\$newFileName"
        Start "$ProcessFolder"
    } catch {
        Write-Host "Failed to move $($file.FullName): $_"
    }
    
}

#-------------------------------------------------------------------------------------------------------------#

#3. Call function

while ($true) {
    $files = Get-ChildItem -Path "$ProcessFolder\To_process" -File
    if ($files) { foreach ($file in $files) { Format-XLSX $file } }
    Start-Sleep -Seconds 3
}